---
const { background, leftHref, rightHref } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <title>Portfolio ❤️</title>
  </head>
  <body>
    <div class="wall">
      <!-- Container that defines scrollable width -->
      <div class="img-container">
        <!-- Background image -->
        <img src={background.src} alt="Background" class="wall-bg" />

        <!-- Overlay that matches the scaled image -->
        <div class="img-overlay">
          <slot />
        </div>
      </div>

      <!-- Navigation -->
      <a class="nav left" href={leftHref} aria-label="Previous wall">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="icon"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path d="M15 18l-6-6 6-6"></path>
        </svg>
      </a>

      <a class="nav right" href={rightHref} aria-label="Next wall">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="icon"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path d="M9 18l6-6-6-6"></path>
        </svg>
      </a>
    </div>
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
  }

  .wall {
    position: relative;
    width: 100%;
    height: 100vh;
    overflow-x: scroll; /* allow horizontal scroll */
    overflow-y: hidden; /* prevent vertical scroll */
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE & Edge */
  }

  .wall::-webkit-scrollbar {
    display: none; /* Chrome/Safari */
  }

  .img-container {
    position: relative;
    height: 100%;
    display: inline-block; /* width = image width */
    min-width: 100%; /* at least fill viewport */

  }

  .wall-bg,
  .img-overlay {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%; /* fill container height */
    width: auto; /* width scales from height + aspect ratio */
    min-width: 100%; /* at least fill viewport */
  }

  .wall-bg {
    z-index: 0;
    pointer-events: none;
    user-select: none;
  }

  .img-overlay {
    z-index: 1;
  }

  /* Navigation arrows */
  .nav {
    position: fixed; /* stay in viewport */
    top: 50%;
    transform: translateY(-50%);
    width: 60px;
    height: 60px;
    background: rgba(0, 0, 0, 0.4);
    border-radius: 50%;
    cursor: pointer;
    transition: background 0.2s;
    z-index: 2000;

    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
  }

  .nav:hover {
    background: rgba(0, 0, 0, 0.7);
  }

  .nav.left {
    left: 20px;
  }

  .nav.right {
    right: 20px;
  }

  .icon {
    width: 32px;
    height: 32px;
    stroke-linecap: round;
    stroke-linejoin: round;
  }
</style>

<script is:inline>
(() => {
  const wall = document.querySelector(".wall");
  const container = wall.querySelector(".img-container");
  const img = container.querySelector(".wall-bg");
  const overlay = container.querySelector(".img-overlay");
  if (!img || !overlay || !wall) return;

  function syncOverlay() {
    const rect = img.getBoundingClientRect();
    overlay.style.width = rect.width + "px";
    overlay.style.height = rect.height + "px";

    // Center the horizontal scroll
    const scrollLeft = (container.offsetWidth - wall.clientWidth) / 2;
    wall.scrollLeft = scrollLeft;
  }

  function onReady() {
    syncOverlay();
    new ResizeObserver(syncOverlay).observe(img);
    window.addEventListener("resize", syncOverlay);
  }

  if (img.complete) onReady();
  else img.addEventListener("load", onReady);
})();
</script>
